{"version":3,"sources":["components/buttons/ShowNum.js","components/buttons/Buttons.js","components/users-list/ShowButton.js","components/users-list/ListElements.js","components/users-list/TotalMessage.js","components/users-list/UsersList.js","App.js","serviceWorker.js","index.js"],"names":["ShowNum","setClass","num","this","props","color","react_default","a","createElement","className","style","Component","Buttons","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","count","addNum","setState","bind","assertThisInitialized","removeNum","onClick","buttons_ShowNum","getData","get","XMLHttpRequest","open","addEventListener","status","jasonObj","JSON","parse","responseText","changeState","arr","toggle","total","length","send","ShowButton","UsersList","changeCheckbox","e","target","checked","wasChecked","_this2","map","elem","id","name","description","createdAt","email","key","onChange","type","date","Date","concat","getFullYear","getMonth","getDate","TotalMessage","changeComponents","users_list_ShowButton","Fragment","users_list_TotalMessage","ListElements","App","buttons_Buttons","users_list_UsersList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6968b76b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ShowNum extends Component {\n  \n  render() {\n    let setClass = {},\n     num = this.props.num;\n    (num < 0) ? setClass = {color: 'red'} : (num > 0) ? setClass = {color: 'green'} : setClass = {color: 'black'};\n      \n    return (      \n      <span className='count' style={setClass}> {num} </span>   \n    );\n  }\n}\n\nexport default ShowNum;\n","import React, { Component } from 'react';\nimport ShowNum from './ShowNum';\n\nclass Buttons extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n    this.addNum = addNum.bind(this);\n    this.removeNum = removeNum.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.removeNum}>-</button>\n        <ShowNum num={this.state.count} />\n        <button onClick={this.addNum}>+</button>\n      </div>\n    );\n  }\n}\n\nfunction addNum() {\n  this.setState(state => {\n    let count = +state.count + 1;\n    return {count: count};\n  });\n}\n\nfunction removeNum() {\n  this.setState(state => {\n    let count = +state.count - 1;\n    return {count: count};\n  });\n}\n\nexport default Buttons;\n","import React, { Component } from 'react';\n\nclass ShowButton extends Component {\n  render() {\n    return <button onClick={getData.bind(this)}>button</button>;\n  }\n}\n\nfunction getData() {\n  const get = new XMLHttpRequest();\n  get.open(\n    'GET',\n    'https://tanuhaua.github.io/datas-file-json/visitors.json',\n    true\n  );\n  get.addEventListener('load', () => {\n    if (get.status === 200) {\n      const jasonObj = JSON.parse(get.responseText);\n      this.props.changeState({\n        arr: jasonObj,\n        toggle: false,\n        total: jasonObj.length\n      });\n    }\n  });\n  get.send();\n}\n\nexport default ShowButton;\n","import React, { Component } from 'react';\nimport '../../index.css'\nclass UsersList extends Component {\n  constructor(props) {\n    super(props);\n    this.changeCheckbox = changeCheckbox.bind(this);\n  }\n\n  render() {\n    return (\n      <table>\n        <tbody>\n          {this.props.arr.map(elem => {\n            const { id, name, description, createdAt, email } = elem;\n            \n            return (\n              <tr key={id}>\n                <td onChange={this.changeCheckbox}>\n                  <input type='checkbox' />\n                </td>\n                <td>{date(createdAt)}</td>\n                <td>{name}</td>\n                <td>{email}</td>\n                <td>{description}</td>\n                <td>{id}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nfunction date(createdAt) {\n  const date = new Date(createdAt);\n  return `${date.getFullYear()}.${date.getMonth()}.${date.getDate()}`;\n}\n\nfunction changeCheckbox(e) {\n  if (e.target.checked === true) {\n    this.props.changeState({ wasChecked: this.props.wasChecked + 1 });\n  } else {\n    this.props.changeState({ wasChecked: this.props.wasChecked - 1 });\n  }\n}\n\nexport default UsersList;\n","import React, { Component } from 'react';\n\nclass TotalMessage extends Component {\n  render() {    \n    return (\n      <div>\n        <h3>Total: {this.props.total}</h3> \n        <h3>Checked: {this.props.wasChecked}</h3> \n      </div>\n    );\n  }\n}\n\nexport default TotalMessage;","import React, { Component } from 'react';\nimport ShowButton from './ShowButton';\nimport ListElements from './ListElements';\nimport TotalMessage from './TotalMessage';\n\nclass UsersList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      arr: [], \n      toggle: true, \n      total: null, \n      wasChecked: 0\n    };\n    this.changeState = changeState.bind(this);\n    this.changeComponents = changeComponents.bind(this);\n  }\n\n  render() {    \n    return (\n      <div>      \n        {this.changeComponents()}\n      </div> \n    );\n  }\n}\nfunction changeState(e) {\n    this.setState(e);    \n  }\n\nfunction changeComponents(){\n  if(this.state.toggle) {\n    return <ShowButton changeState={this.changeState} />;\n  } else {\n    return (\n      <>\n        <TotalMessage total={this.state.total} wasChecked={this.state.wasChecked}/>\n        <ListElements arr={this.state.arr} wasChecked={this.state.wasChecked} changeState={this.changeState}/>\n      </>\n    );\n  }\n}\n\n\nexport default UsersList;","import React, { Component } from 'react';\nimport Buttons from './components/buttons/Buttons';\nimport UsersList from './components/users-list/UsersList';\nclass App extends Component {\n  render() {\n    return (\n      <>      \n        <Buttons/>\n        <UsersList/>  \n      </> \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}